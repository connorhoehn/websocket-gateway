version: '3.8'

services:
  redis:
    image: redis:7-alpine
    container_name: websocket-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - websocket-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Main websocket gateway with all services (default)
  websocket-gateway:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: websocket-gateway
    ports:
      - "8080:8080"
    env_file:
      - config/full-service.env
    environment:
      - REDIS_ENDPOINT=redis
      - REDIS_PORT=6379
      - NODE_ENV=development
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - websocket-network
    volumes:
      - ./src:/app/src:ro
    restart: unless-stopped
    command: node src/server.js

  # Chat-only service
  chat-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: chat-service
    ports:
      - "8081:8080"
    env_file:
      - config/chat-only.env
    environment:
      - REDIS_ENDPOINT=redis
      - REDIS_PORT=6379
      - NODE_ENV=development
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - websocket-network
    volumes:
      - ./src:/app/src:ro
    restart: unless-stopped
    command: node src/server.js
    profiles:
      - chat-only

  # Presence-only service
  presence-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: presence-service
    ports:
      - "8082:8080"
    env_file:
      - config/presence-only.env
    environment:
      - REDIS_ENDPOINT=redis
      - REDIS_PORT=6379
      - NODE_ENV=development
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - websocket-network
    volumes:
      - ./src:/app/src:ro
    restart: unless-stopped
    command: node src/server.js
    profiles:
      - presence-only

  # Cursor-only service
  cursor-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cursor-service
    ports:
      - "8083:8080"
    env_file:
      - config/cursor-only.env
    environment:
      - REDIS_ENDPOINT=redis
      - REDIS_PORT=6379
      - NODE_ENV=development
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - websocket-network
    volumes:
      - ./src:/app/src:ro
    restart: unless-stopped
    command: node src/server.js
    profiles:
      - cursor-only

  # Local development mode
  websocket-dev:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: websocket-dev
    ports:
      - "8080:8080"
    env_file:
      - config/local-dev.env
    environment:
      - REDIS_ENDPOINT=redis
      - REDIS_PORT=6379
      - NODE_ENV=development
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - websocket-network
    volumes:
      - ./src:/app/src
      - ./config:/app/config:ro
    restart: unless-stopped
    command: node src/server.js
    profiles:
      - local-dev

  # Optional: Redis Commander for GUI management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis-commander
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8084:8081"
    depends_on:
      - redis
    networks:
      - websocket-network
    profiles:
      - tools

volumes:
  redis-data:

networks:
  websocket-network:
    driver: bridge
